class LiveData{constructor(t,e=!1){this._valueIsInitialized=void 0!==t,this._value=t,this._nullSafe=e,this._arrOfFn=[]}static make(t,e=!1){return new this(t,e)}isInitialized(){return this._valueIsInitialized}async notify(){!this._value&&this._nullSafe||this._arrOfFn.forEach(t=>{t(this._value)})}async postValue(t){this._value=t,this.notify(),this._valueIsInitialized=!0}mutateValue(t){return this.postValue(t(this._value)),this}getValue(){return this._value}set value(t){this.postValue(t)}get value(){return this._value}observe(t){this._arrOfFn.push(async e=>{t(e)}),this._valueIsInitialized}observeDebounce(t,e=300){this._arrOfFn.push(this.debounce(t,e)),this._valueIsInitialized&&this.debounce(t,e)}observeThrottle(t,e=500){this._arrOfFn.push(this.throttle(t,e)),this._valueIsInitialized&&this.throttle(t,e)}debounce(t,e=300){let i;return async function(){const s=this,a=arguments;clearTimeout(i),i=setTimeout(function(){t.apply(s,a)},e)}}throttle(t,e=500){let i=!1;return async(...s)=>{i||(t(...s),i=!0,setTimeout(()=>{i=!1},e))}}}